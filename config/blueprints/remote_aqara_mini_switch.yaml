# This blueprint uses an Aqara Mini Switch Remote Control connected through ZHA
#
# | Button | Duration     | Action        |
# | -------| ------------ | ------------- |
# | Power  | Short Press  | Custom action |
# | Power  | Double Press | Custom action |
# | Power  | Long Press   | Custom action |
# | Power  | Release      | Custom action |
# | Device | Shake        | Custom action |

blueprint:
  name: Aqara, Wireless Mini Switch
  description: Control devices with your Aqara Wireless Mini Switch.
  author: Thomas Maxson
  source_url: https://gist.github.com/thomasmaxson/67dc65d3cf0725f3d2088d38ba9f0234
  homeassistant:
    min_version: 2024.6.0
  domain: automation
  input:
    remote:
      name: Aqara Wireless Mini Switch
      description: Aqara Mini Switch remote used to trigger actions.
      selector:
        device:
          multiple: false
          filter:
            - manufacturer: Aqara
              model: Wireless mini switch (with gyroscope) (WXKG12LM)
            - manufacturer: Aqara
              model: Wireless mini switch (with gyroscope)
            - integration: mqtt
              manufacturer: Xiaomi
              model: WXKG11LM
            - integration: zha
              manufacturer: LUMI
              model: lumi.remote.b1acn01

    remote_actions_default:
      name: Button Actions
      icon: mdi:hand-pointing-up
      collapsed: false
      input:
        event_button_press_on_single:
          name: Button Press Once Event
          description: The action to perform on _single press_ of the **Button**.
          default: []
          selector:
            action:

        event_button_press_on_double:
          name: Button Press Twice Event
          description: The action to perform on _double press_ of the **Button**.
          default: []
          selector:
            action:

        event_button_press_on_hold:
          name: Button Press & Hold Event
          description: The action to perform on _press and hold_ of the **Button**.
          default: []
          selector:
            action:

    remote_actions_extra:
      name: Advanced Button Actions
      icon: mdi:hand-pointing-up
      collapsed: true
      input:
        event_button_press_on_release:
          name: Button Release Event
          description: The action to perform on _release_ of the **Button**.
          default: []
          selector:
            action:

        event_device_shake_start:
          name: Device Shake Event
          description: >-
            The action to perform on _shake_ of the **Device**.
            <br>This interaction type is only available on devices with a gyroscope.
          default: []
          selector:
            action:

    automation_config:
      name: Configuration
      icon: mdi:cog
      collapsed: true
      input:
        config_mode:
          name: Automation Mode
          description: Mode that automation runs in.
          default: restart
          selector:
            select:
              options:
                - single
                - restart
                - queued
                - parallel
              custom_value: false
              multiple: false

        config_max_num:
          name: Mode Max
          description: >
            Maximum number of runs that can be executed or queued at a time.
            <br>Ignored by _Single_ and _Restart_ Modes.
          default: 10
          selector:
            number:
              mode: slider
              unit_of_measurement: runs
              min: 1.0
              max: 15.0
              step: 1.0

        debug_valid_events:
          name: Debug Remote
          description: Display a persistent notification, with remote and event details, if triggered.
          default: false
          selector:
            boolean:

mode: !input config_mode
max: !input config_max_num
max_exceeded: silent

variables:
  var_remote: !input remote
  var_debug_identifiers: "{{ device_attr( var_remote, 'identifiers' ) | list }}"
  var_debug_integration: "{{ var_debug_identifiers[0][0] | string }}"
  var_debug_trigger_data: '{{ trigger.event.data if var_debug_identifiers == "zha" else trigger }}'

triggers:
  - alias: Button Press Once (via ZHA event)
    trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: single
    id: trigger_press_single_zha
  - alias: Button Press Once (via MQTT event)
    trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: single
    id: trigger_press_single_mqtt


  - alias: Button Press Twice (via ZHA event)
    trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: double
    id: trigger_press_double_zha
  - alias: Button Press Twice (via MQTT event)
    trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: double
    id: trigger_press_double_mqtt


  - alias: Button Press and Hold (via ZHA event)
    trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: hold
    id: trigger_hold_zha
  - alias: Button Press and Hold (via MQTT event)
    trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: hold
    id: trigger_hold_mqtt


  - alias: Button Release (via ZHA event)
    trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: release
    id: trigger_release_zha
  - alias: Button Release (via MQTT event)
    trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: release
    id: trigger_release_mqtt

  - alias: Button Shake (via MQTT event)
    trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: shake
    id: trigger_shake_mqtt

conditions:
  - condition: template
    value_template: "{{ var_remote | count > 0 }}"

actions:
  - variables:
      device_manufacturer: "{{ device_attr( var_remote, 'manufacturer' ) | string }}"
      device_model: "{{ device_attr( var_remote, 'model' ) | string }}"
      device_model_id: "{{ device_attr( var_remote, 'model_id' ) | string }}"
      device_identifiers: "{{ device_attr( var_remote, 'identifiers' ) | list }}"
      integration_type: "{{ device_identifiers[0][0] | string | lower }}"
      trigger_action: >-
        {%- if integration_type == "zha" -%}
          {{ trigger.event.data.command }}
        {%- elif integration_type == "mqtt" -%}
          {{ trigger.payload }}
        {%- endif -%}
      trigger_data: >-
        {%- if integration_type == "zha" -%}
          {{ trigger.event.data }}
        {%- elif integration_type == "mqtt" -%}
          {{ trigger }}
        {%- endif -%}

  - if:
      - condition: template
        value_template: !input debug_valid_events
    then:
      - action: persistent_notification.create
        data:
          notification_id: blueprint_debug__remote_sonoff_wireless_switch
          title: >-
            {%- if device_model_id not in [ "", "none", none, null, false] -%}
              {{ device_manufacturer + " " + device_model }} ({{ device_model_id }})
            {%- else -%}
              {{ device_manufacturer + " " + device_model }}
            {%- endif -%}
          message: >-
            <br>_Integration_: {{ integration_type }}  |  _Action_: {{ trigger_action }}
            <br>
            <br>_Remote ID_: {{ var_remote }}
            <br>
            <br>```{{ trigger_data }}```

  - choose:
      - conditions:
          - condition: trigger
            id: 
              - trigger_press_single_zha
              - trigger_press_single_mqtt
        sequence: !input event_button_press_on_single

      - conditions:
          - condition: trigger
            id: 
              - trigger_press_double_zha
              - trigger_press_double_mqtt
        sequence: !input event_button_press_on_double

      - conditions:
          - condition: trigger
            id: 
              - trigger_hold_zha
              - trigger_hold_mqtt
        sequence: !input event_button_press_on_hold

      - conditions:
          - condition: trigger
            id: 
              - trigger_release_zha
              - trigger_release_mqtt
        sequence: !input event_button_press_on_release

      - conditions:
          - condition: trigger
            id: 
              - trigger_shake_zha
              - trigger_shake_mqtt
        sequence: !input event_device_shake_start
