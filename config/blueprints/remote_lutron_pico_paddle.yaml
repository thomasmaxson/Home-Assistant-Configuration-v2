# This blueprint uses an Lutron Pico Paddle Remote Control
#
# | Button | Duration     | Action        |
# | ------ | ------------ | ------------- |
# | On     | Short Press  | Custom action |
# | On     | Long Press   | Custom action |
# | Off    | Short Press  | Custom action |
# | Off    | Long Press   | Custom action |

blueprint:
  name: Lutron Pico, Paddle Remote Control
  description: Control devices with your Lutron Pico paddle.
  author: Thomas Maxson
  source_url: https://gist.github.com/thomasmaxson/7a829086a4f3bdde56691cf85184345c
  homeassistant:
    min_version: 2024.6.0
  domain: automation
  input:
    remote:
      name: Lutron Pico remote control
      description: Select the Lutron Pico remote to trigger your automations.
      selector:
        device:
          multiple: false
          filter:
            - integration: lutron_caseta
              manufacturer: Lutron Electronics Co., Inc
              model: PJ2-1P-GXX (PaddleSwitchPico)
            - integration: lutron_caseta
              manufacturer: Lutron Electronics Co., Inc
              model: PJ2-1P-GXX

    actions_single_press:
      name: Single Tap
      icon: mdi:gesture-tap
      collapsed: false
      input:
        button_on_single:
          name: Tap On Button
          description: Action(s) to perform on single tap of the on button
          default: []
          selector:
            action: {}
        button_off_single:
          name: Tap Off Button
          description: Action(s) to perform on single tap of the off button
          default: []
          selector:
            action: {}

    actions_hold_press:
      name: Press and Hold
      icon: mdi:gesture-tap-hold
      collapsed: true
      input:
        button_on_hold:
          name: Hold On Button
          description: Action(s) to perform on hold of the on button
          default: []
          selector:
            action: {}
        button_off_hold:
          name: Hold Off Button
          description: Action(s) to perform on hold of the off button
          default: []
          selector:
            action: {}
        duration_hold:
          name: Hold Delay
          description: Duration used for the hold detection
          default: 500
          selector:
            number:
              min: 500
              max: 4000
              unit_of_measurement: milliseconds
              step: 500
              mode: slider

    automation_config:
      name: Configuration
      icon: mdi:cog
      collapsed: true
      input:
        config_mode:
          name: Automation Mode
          description: Mode that automation runs in.
          default: restart
          selector:
            select:
              options:
                - single
                - restart
                - queued
                - parallel
              custom_value: false
              multiple: false

        config_max_num:
          name: Mode Max
          description: >
            Maximum number of runs that can be executed or queued at a time.
            <br>Ignored by _Single_ and _Restart_ Modes..
          default: 10
          selector:
            number:
              mode: slider
              unit_of_measurement: runs
              min: 1.0
              max: 15.0
              step: 1.0

    debug_config:
      name: Debug
      icon: mdi:bug
      collapsed: true
      input:
        log_valid_events:
          name: Log Valid Remote Events
          description: Display a persistent notification if a _valid event_ is triggered.
          default: false
          selector:
            boolean:

        log_invalid_events:
          name: Log Invalid Remote Events
          description: Display a persistent notification if an _invalid event_ is triggered.
          default: false
          selector:
            boolean:

mode: !input config_mode
max: !input config_max_num
max_exceeded: silent

variables:
  trigger_device_id: "{{ trigger.event.data.device_id }}"
  var_remote: !input remote

triggers:
  - trigger: device
    device_id: !input remote
    domain: lutron_caseta
    type: press
    subtype: "on"
    id: on_pressed

  - trigger: device
    device_id: !input remote
    domain: lutron_caseta
    type: press
    subtype: "off"
    id: off_pressed

conditions:
  - condition: template
    value_template: "{{ var_remote | length > 0 }}"

actions:
  - if:
      - condition: template
        value_template: !input log_valid_events
    then:
      - action: persistent_notification.create
        data:
          notification_id: blueprint_debug__lutron_pico_paddle__command_valid
          title: Remote Command
          message: >-
            Lutron Pico Paddle remote command.
            <br>
            <br>_Remote Data_: 
            <br>"{{ trigger.event.data }}"

  - choose:
      # Button Press (ON)
      - conditions:
          - condition: trigger
            id: on_pressed
        sequence:
          - wait_for_trigger:
              - trigger: device
                device_id: !input remote
                domain: lutron_caseta
                type: release
                subtype: "on"
            timeout:
              hours: 0
              minutes: 0
              seconds: 0
              milliseconds: "{{ var_duration_hold | float }}"
            continue_on_timeout: true
          - if:
              - condition: template
                value_template: "{{ wait.trigger == none }}"
            then: !input button_on_hold
            else: !input button_on_single

      # Button Press (OFF)
      - conditions:
          - condition: trigger
            id: off_pressed
        sequence:
          - wait_for_trigger:
              - trigger: device
                device_id: !input remote
                domain: lutron_caseta
                type: release
                subtype: "off"
            timeout:
              hours: 0
              minutes: 0
              seconds: 0
              milliseconds: "{{ var_duration_hold | float }}"
            continue_on_timeout: true
          - if:
              - condition: template
                value_template: "{{ wait.trigger == none }}"
            then: !input button_off_hold
            else: !input button_off_single

    default:
      - condition: template
        value_template: !input log_invalid_events
      - sequence:
          - action: persistent_notification.create
            data:
              notification_id: blueprint_debug__lutron_pico_paddle__command_invalid
              title: Uncaught Remote Command
              message: >-
                Lutron Pico Paddle remote ran the default event from the "choose" event action.
                Please check any automations which may not be handling this event.
                <br>
                <br>_Remote Data_: 
                <br>"{{ trigger.event.data }}"
