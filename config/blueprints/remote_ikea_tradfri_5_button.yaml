# This blueprint uses an IKEA TRÅDFRI 5 Button Remote Control connected through ZHA
#
# | Button      | Duration    | Action              |
# | ----------- | ----------- | ------------------- |
# | Power       | Short Press | Toggle the light    |
# | Power       | Long Press  | Custom action       |
# | Dim-Up      | Short Press | Turn on             |
# | Dim-Up      | Long Press  | Increase brightness |
# | Dim-Down    | Short Press | Turn off            |
# | Dim-Down    | Long Press  | Decrease brightness |
# | Left Arrow  | Short Press | Custom action       |
# | Left Arrow  | Long Press  | Custom action       |
# | Right Arrow | Short Press | Custom action       |
# | Right Arrow | Long Press  | Custom action       |

blueprint:
  name: IKEA TRÅDFRI, 5 Button Remote Control
  description: Control devices with your IKEA TRÅDFRI 5 button remote.
  author: Thomas Maxson
  source_url: https://gist.github.com/thomasmaxson/1b776b184882ba9c85c90c20c02b423a
  homeassistant:
    min_version: 2024.6.0
  domain: automation
  input:
    remote:
      name: IKEA TRÅDFRI remote control
      description: Select the IKEA TRÅDFRI remote to trigger your automations.
      selector:
        device:
          filter:
            - integration: zha
              manufacturer: IKEA of Sweden
              model: TRADFRI remote control
          multiple: false

    remote_light:
      name: Light Configuration
      icon: mdi:lightbulb-on
      collapsed: false
      input:
        light:
          name: Light
          description: Select the light entity you wish to control.
          default: "light.undefined"
          selector:
            entity:
              filter:
                domain: light

        force_brightness:
          name: Force turn on brightness
          description: Force the brightness to the a level, when the "on" button on is pressed.
          default: false
          selector:
            boolean: null

        brightness:
          name: Brightness
          description: Brightness of the light(s) when turning on.
          selector:
            number:
              mode: slider
              unit_of_measurement: "%"
              min: 0.0
              max: 100.0
              step: 1.0
          default: 50

        brightness_step:
          name: Brightness Step
          description: Value to increase/decrease brightness.
          selector:
            number:
              mode: slider
              unit_of_measurement: "%"
              min: 10
              max: 100
              step: 5.0
          default: 20

        repeat_duration:
          name: Repeat Duration
          description: The speed in which to update the light when the button is held.
          selector:
            number:
              mode: slider
              unit_of_measurement: milliseconds
              min: 100
              max: 1000
              step: 100
          default: 500

    remote_actions:
      name: Button Actions
      icon: mdi:hand-pointing-up
      collapsed: false
      input:
        button_power_long:
          name: Power Button - Long Press
          description: The action to perform on Long Press of the Power Button
          default: []
          selector:
            action: null

        button_left_short:
          name: Left Button - Short Press
          description: The action to perform on Short Press of the Left Button
          default: []
          selector:
            action: null

        button_left_long:
          name: Left Button - Long Press
          description: '
            The action to perform on Long Press of the Left Button.
            Use with care, before the long press event, the "on" event gets triggered.'
          default: []
          selector:
            action: null

        button_right_short:
          name: Right Button - Short Press
          description: The action to perform on Short Press of the Right Button
          default: []
          selector:
            action: null

        button_right_long:
          name: Right Button - Long Press
          description: '
            The action to perform on Long Press of the Right Button.
            Use with care, before the long press event, the "on" event gets triggered.'
          default: []
          selector:
            action: null

    automation_config:
      name: Automation Configuration
      icon: mdi:cog
      collapsed: true
      input:
        config_mode:
          name: Automation Mode
          description: Mode that automation runs in.
          default: restart
          selector:
            select:
              options:
                - single
                - restart
                - queued
                - parallel
              custom_value: false
              multiple: false

        config_max_num:
          name: Mode Max
          description: >
            Maximum number of runs that can be executed or queued at a time.
            Ignored by Single and Restart Modes.
          default: 10
          selector:
            number:
              mode: slider
              unit_of_measurement: runs
              min: 1.0
              max: 15.0
              step: 1.0

        log_invalid_events:
          name: Log Invalid Remote Events
          description: Display notification if an invalid trigger is received.
          default: false
          selector:
            boolean:

mode: !input config_mode
max: !input config_max_num
max_exceeded: silent

variables:
  var_light: !input light
  var_repeat: !input repeat_duration
  var_force_brightness: !input force_brightness

triggers:
  - trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote

conditions:
  - condition: template
    value_template: "{{ light_bulbs != 'light.undefined' }}"

actions:
  - choose:
      # Short-Press on the power button (ON)
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'toggle' }}"

          - condition: state
            entity_id: !input light
            state: "off"
        sequence:
          sequence:
            - if:
                - condition: template
                  value_template: "{{ var_force_brightness }}"
              then:
                - action: light.turn_on
                  target:
                    entity_id: !input light
                  data:
                    transition: "{{ ( var_repeat / 1000 ) | float }}"
                    brightness_pct: !input brightness
              else:
                - action: light.turn_on
                  target:
                    entity_id: !input light

      # Short-Press on the power button (OFF)
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'toggle' }}"
          - condition: state
            entity_id: !input light
            state: "on"
        sequence:
          - action: light.turn_off
            target:
              entity_id: !input light

      # Long-Press on the power button
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'move_to_level_with_on_off' }}"
        sequence: !input button_power_long

      # Short-Press on the dim-up button
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'step_with_on_off' }}"
        sequence:
          - action: light.turn_on
            target:
              entity_id: !input light
            data:
              brightness_step_pct: 10
              transition: "{{ ( var_repeat / 1000 ) | float }}"

      # Long-Press on the dim-up button.
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'move_with_on_off' }}"
        sequence:
          - repeat:
              while: []
              sequence:
                - action: light.turn_on
                  target:
                    entity_id: !input light
                  data:
                    brightness_step_pct: 10
                    transition: "{{ ( var_repeat / 1000 ) | float }}"
                - delay:
                    milliseconds: !input repeat_duration

      # Short-Press on the dim-down button.
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'step' }}"
        sequence:
          - action: light.turn_on
            target:
              entity_id: !input light
            data:
              brightness_step_pct: -20
              transition: "{{ ( var_repeat / 1000 ) | float }}"

      # Long-Press on the dim-down button.
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'move' }}"
        sequence:
          - repeat:
              while: []
              sequence:
                - action: light.turn_on
                  target:
                    entity_id: !input light
                  data:
                    brightness_step_pct: -10
                    transition: "{{ ( var_repeat / 1000 ) | float }}"
                - delay:
                    milliseconds: !input repeat_duration

      # Short-Press on the left button
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'press' }}"
          - condition: template
            value_template: "{{ trigger.event.data.args == [257,13,0] }}"
        sequence: !input button_left_short

      # Long-Press on the left button
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'hold' }}"
          - condition: template
            value_template: "{{ trigger.event.data.args == [3329,0] }}"
        sequence: !input button_left_long

      # Short-Press on the right button
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'press' }}"
          - condition: template
            value_template: "{{ trigger.event.data.args == [256,13,0] }}"
        sequence: !input button_right_short

      # Long-Press on the right button
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'hold' }}"
          - condition: template
            value_template: "{{ trigger.event.data.args == [3328,0] }}"
        sequence: !input button_left_long

    # Any other event will cancel the repeat loops
    # default: []

    default:
      - condition: template
        value_template: "{{ log_invalid_events == 'true' }}"
      - sequence:
          - action: persistent_notification.create
            data:
              notification_id: hue_dimmer_blueprint
              title: Uncaught Dimmer Command
              message:
                Lutron Pico 5 Button remote ran the default event from the "choose" event action.
                Please check any automations which may not be handling this event.
