# This blueprint uses an IKEA TRÅDFRI, RODRET and SOMRIG 2 Button Remote Control connected through ZHA or MQTT.
#
# | Button        | Action       | Event                               |
# | ------------- | ------------ | ----------------------------------- |
# | On OR 1 Dot   | Press        | Turn on OR custom event             |
# | On OR 1 Dot   | Press & Hold | Increase brightness OR custom event |
# | Off OR 2 Dots | Press        | Turn off OR custom event            |
# | Off OR 2 Dots | Press & Hold | Decrease brightness OR custom event |
# | ------------- | ------------ | ----------------------------------- |

blueprint:
  name: IKEA RODRET, SOMRIG or TRÅDFRI, 2 Button Remote Control
  description: Control devices with your IKEA RODRET, SOMRIG or TRÅDFRI 2 button remotes.
  author: Thomas Maxson
  source_url: https://gist.github.com/thomasmaxson/46933a9ad0271a8517b2faef372857ba
  homeassistant:
    min_version: 2024.6.0
  domain: automation
  input:
    remote:
      name: Remote
      description: >-
        Select the IKEA remote to to use
        <br>Choose from RODRET, SOMRIG or TRÅDFRI 2 button remotes
      default: []
      selector:
        device:
          multiple: false
          filter:
            - integration: mqtt
              manufacturer: IKEA
              model: TRADFRI on/off switch
            - integration: mqtt
              manufacturer: IKEA
              model: RODRET wireless dimmer/power switch
            - integration: mqtt
              manufacturer: IKEA
              model: SOMRIG shortcut button
            - integration: zha
              manufacturer: IKEA of Sweden
              model: TRADFRI on/off switch
            - integration: zha
              manufacturer: IKEA of Sweden
              model: RODRET Dimmer
            - integration: zha
              manufacturer: IKEA of Sweden
              model: SOMRIG shortcut button

    light:
      name: Light(s)
      description: Select the light entities you wish to control.
      default: []
      selector:
        entity:
          multiple: true
          filter:
            domain: light

    light_config:
      name: Light Configuration
      icon: mdi:lightbulb-on
      collapsed: true
      input:
        brightness:
          name: Brightness
          description: >-
            Brightness of the light(s) when turning on.
            <br>&bull; Set 1-100 to use a specific brightness level
            <br>&bull; Set to 0 to use the lights last brightness level
          selector:
            number:
              mode: slider
              unit_of_measurement: "%"
              min: 0
              max: 100.0
              step: 1.0
          default: 0

        brightness_step:
          name: Brightness Step
          description: Incremental value to increase or decrease lights brightness.
          selector:
            number:
              mode: slider
              unit_of_measurement: "%"
              min: 5
              max: 100
              step: 5.0
          default: 20

        repeat_delay:
          name: Repeat Delay
          description: Delay between the brightness adjustment steps.
          selector:
            number:
              mode: slider
              unit_of_measurement: seconds
              min: 0.25
              max: 5
              step: 0.25
          default: 1

        repeat_max_count:
          name: Maximum loop repeats
          description: >-
            Maximum number of times to repeat the dimmer brightness event(s).
            <br>&bull; Used as a safety limit to prevent an endless loop, just in case the corresponding stop event is not received.
          default: 10
          selector:
            number:
              min: 1
              max: 100
              mode: slider
              step: 1

    override_button_events:
      name: Override On/Off Button Events
      description: Define custom actions to override the default light control actions.
      icon: mdi:sync-alert
      collapsed: true
      input:
        event_on_short:
          name: Override On Button Press Event
          description: The action to perform on _press_ of the **On Button**.
          default: []
          selector:
            action: null

        event_on_long:
          name: Override On Button Press and Hold Event
          description: >-
            The action to perform on _press and hold_ of the **On Button**.
            <br>Use with care, before the _press and hold_ event, this buttons _press_ event gets triggered.
          default: []
          selector:
            action: null

        event_off_short:
          name: Override Off Button Press Event
          description: The action to perform on _press_ of the **Off Button**.
          default: []
          selector:
            action: null

        event_off_long:
          name: Override Off Button Press and Hold Event
          description: >
            The action to perform on _press and hold_ of the **Off Button**.
            <br>Use with care, before the _press and hold_ event, this buttons _press_ event gets triggered.
          default: []
          selector:
            action: null

    automation_config:
      name: Configuration
      icon: mdi:cog
      collapsed: true
      input:
        config_mode:
          name: Automation Mode
          description: Mode that automation runs in.
          default: restart
          selector:
            select:
              options:
                - single
                - restart
                - queued
                - parallel
              custom_value: false
              multiple: false

        config_max_num:
          name: Mode Max
          description: >
            Maximum number of runs that can be executed or queued at a time.
            <br>Ignored by _Single_ and _Restart_ Modes.
          default: 10
          selector:
            number:
              mode: slider
              unit_of_measurement: runs
              min: 1.0
              max: 15.0
              step: 1.0

        debug_valid_events:
          name: Debug Remote
          description: Display a persistent notification, with remote and event details, if triggered.
          default: false
          selector:
            boolean:


mode: !input config_mode
max: !input config_max_num
max_exceeded: silent


variables:
  var_remote: !input remote
  var_light: !input light
  var_brightness: !input brightness
  var_brightness_step: !input brightness_step
  var_repeat_delay: !input repeat_delay
  var_repeat_max_count: !input repeat_max_count


triggers:
  - alias: On (Dash, Line or 1 Dot) Button Press (via ZHA event)
    trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: "on"
    id: trigger_on_short_zha
  - alias: On (Dash, Line or 1 Dot) Button Press (via MQTT event)
    trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: "on"
    id: trigger_on_short_mqtt

  - alias: On (Dash, Line or 1 Dot) Button Press and Hold (via ZHA event)
    trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: "move_with_on_off"
    id: trigger_on_long_zha
  - alias: On (Dash, Line or 1 Dot) Button Press and Hold (via MQTT event)
    trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: "brightness_move_up"
    id: trigger_on_long_mqtt

  - alias: On (Dash, Line or 1 Dot) Button Release (via ZHA event)
    trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: "stop_with_on_off"
    id: trigger_on_release_zha
  - alias: On (Dash, Line or 1 Dot) Button Release (via MQTT event)
    trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: "brightness_stop"
    id: trigger_on_release_mqtt


  - alias: Off (Circle or 2 Dots) Button Press (via ZHA event)
    trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: "off"
    id: trigger_off_short_zha
  - alias: Off (Circle or 2 Dots) Button Press (via MQTT event)
    trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: "off"
    id: trigger_off_short_mqtt

  - alias: Off (Circle or 2 Dots) Button Press and Hold (via ZHA event)
    trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: "move"
    id: trigger_off_long_zha
  - alias: Off (Circle or 2 Dots) Button Press and Hold (via MQTT event)
    trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: "brightness_move_down"
    id: trigger_off_long_mqtt

  - alias: Off (Circle or 2 Dots) Button Release (via ZHA event)
    trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: "stop_with_on_off"
    id: trigger_off_release_zha
  - alias: Off (Circle or 2 Dots) Button Release (via MQTT event)
    trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: "brightness_stop"
    id: trigger_off_release_mqtt


conditions:
  - condition: and
    conditions:
      - condition: template
        value_template: "{{ var_remote | length > 0 }}"


actions:
  - variables:
      device_manufacturer: "{{ device_attr( var_remote, 'manufacturer' ) | string }}"
      device_model: "{{ device_attr( var_remote, 'model' ) | string }}"
      device_model_id: "{{ device_attr( var_remote, 'model_id' ) | string }}"
      device_identifiers: "{{ device_attr( var_remote, 'identifiers' ) | list }}"
      integration_type: "{{ device_identifiers[0][0] | string | lower }}"
      trigger_action: >-
        {%- if integration_type == "zha" -%}
          {{ trigger.event.data.command }}
        {%- elif integration_type == "mqtt" -%}
          {{ trigger.payload }}
        {%- endif -%}
      trigger_data: >-
        {%- if integration_type == "zha" -%}
          {{ trigger.event.data }}
        {%- elif integration_type == "mqtt" -%}
          {{ trigger }}
        {%- endif -%}

  - if:
      - condition: template
        value_template: !input debug_valid_events
    then:
      - action: persistent_notification.create
        data:
          notification_id: blueprint_debug__remote_ikea_rodret_somrig_tradfri_2_button
          title: >-
            {%- if device_model_id not in [ "", "none", none, null, false] -%}
              {{ device_manufacturer + " " + device_model }} ({{ device_model_id }})
            {%- else -%}
              {{ device_manufacturer + " " + device_model }}
            {%- endif -%}
          message: >-
            <br>_Integration_: {{ integration_type }}  |  _Action_: {{ trigger_action }}
            <br>
            <br>_Remote ID_: {{ var_remote }}
            <br>
            <br>```{{ trigger_data }}```

  - choose:
      # On Button Press – SHORT
      - conditions:
          - condition: trigger
            id:
              - trigger_on_short_zha
              - trigger_on_short_mqtt
        sequence:
          - if:
              - condition: template
                value_template: "{{ var_light | length > 0 }}"
            then:
              - if:
                  - condition: template
                    value_template: "{{ var_brightness | int > 0 }}"
                then:
                  - action: light.turn_on
                    target:
                      entity_id: >-
                        {{ expand( var_light ) | selectattr( "state", "eq", "off" ) | map( attribute = "entity_id" ) | list }}
                    data:
                      brightness_pct: !input brightness
                else:
                  - action: light.turn_on
                    target:
                      entity_id: >-
                        {{ expand( var_light ) | selectattr( "state", "eq", "off" ) | map( attribute = "entity_id" ) | list }}
            else: !input event_on_short

      # On Button Press – LONG
      - conditions:
          - condition: trigger
            id:
              - trigger_on_long_zha
              - trigger_on_long_mqtt
        sequence:
          - if:
              - condition: template
                value_template: "{{ var_light | length > 0 }}"
            then:
              - repeat:
                  until:
                    - condition: or
                      conditions:
                        - condition: trigger
                          id:
                            - trigger_on_release_zha
                            - trigger_on_release_mqtt
                        - condition: template
                          value_template: "{{ repeat.index > var_repeat_max_count | int }}"
                  sequence:
                    - action: light.turn_on
                      target:
                        entity_id: >-
                          {{ expand( var_light ) | selectattr( "state", "eq", "on" ) | map( attribute = "entity_id" ) | list }}
                      data:
                        brightness_step_pct: "{{ var_brightness_step * 1 | int }}"
                    - delay:
                        seconds: "{{ var_repeat_delay | float }}"
            else: !input event_on_long

      # Off Button Press – SHORT
      - conditions:
          - condition: trigger
            id:
              - trigger_off_short_zha
              - trigger_off_short_mqtt
        sequence:
          - if:
              - condition: template
                value_template: "{{ var_light | length > 0 }}"
            then:
              - action: light.turn_off
                target:
                  entity_id: >-
                    {{ expand( var_light ) | selectattr( "state", "eq", "on" ) | map( attribute = "entity_id" ) | list }}
            else: !input event_off_short

      # Off Button Press – LONG
      - conditions:
          - condition: trigger
            id:
              - trigger_off_long_zha
              - trigger_off_long_mqtt
        sequence:
          - if:
              - condition: template
                value_template: "{{ var_light | length > 0 }}"
            then:
              - repeat:
                  until:
                    - condition: or
                      conditions:
                        - condition: trigger
                          id:
                            - trigger_off_release_zha
                            - trigger_off_release_mqtt
                        - condition: template
                          value_template: "{{ repeat.index > var_repeat_max_count | int }}"
                  sequence:
                    - action: light.turn_on
                      target:
                        entity_id: >-
                          {{ expand( var_light ) | selectattr( "state", "eq", "on" ) | map( attribute = "entity_id" ) | list }}
                      data:
                        brightness_step_pct: "{{ var_brightness_step * -1 | int }}"
                    - delay:
                        seconds: "{{ var_repeat_delay | float }}"
            else: !input event_off_long
