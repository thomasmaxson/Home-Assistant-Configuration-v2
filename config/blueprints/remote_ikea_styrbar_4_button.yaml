# This blueprint uses an IKEA STYRBAR Remote Control connected through ZHA or MQTT.
#
# | Button      | Duration    | Action              |
# | ----------- | ----------- | ------------------- |
# | Dim-Up      | Short Press | Turn on             |
# | Dim-Up      | Long Press  | Increase brightness |
# | Dim-Down    | Short Press | Turn off            |
# | Dim-Down    | Long Press  | Decrease brightness |
# | Left Arrow  | Short Press | Custom action       |
# | Left Arrow  | Long Press  | Custom action       |
# | Right Arrow | Short Press | Custom action       |
# | Right Arrow | Long Press  | Custom action       |

blueprint:
  name: IKEA STYRBAR, Remote control
  description: Control devices with your IKEA STYRBAR 4 button remote.
  author: Thomas Maxson
  source_url: https://gist.github.com/thomasmaxson/b494e0d0a67a7ed940188c30eedeb7fa
  homeassistant:
    min_version: 2024.6.0
  domain: automation
  input:
    remote:
      name: IKEA STYRBAR Remote
      description: Select the remote control you wish to use.
      selector:
        device:
          multiple: false
          filter:
            - integration: zha
              manufacturer: IKEA of Sweden
              model: Remote Control N2
            - integration: mqtt
              manufacturer: IKEA
              model: STYRBAR remote control

    light:
      name: Light(s)
      description: Select the light entities you wish to control.
      selector:
        entity:
          multiple: true
          filter:
            domain: light

    light_config:
      name: Light Configuration
      icon: mdi:lightbulb-on
      collapsed: true
      input:
        brightness:
          name: Brightness
          description: >-
            Brightness of the light(s) when turning on.
            <br>&bull; Set 1-100 to use a specific brightness level
            <br>&bull; Set to 0 to use the lights last brightness level
          selector:
            number:
              mode: slider
              unit_of_measurement: "%"
              min: 0
              max: 100.0
              step: 1.0
          default: 0

        brightness_step:
          name: Brightness Step
          description: Incremental value to increase or decrease lights brightness.
          selector:
            number:
              mode: slider
              unit_of_measurement: "%"
              min: 5
              max: 100
              step: 5.0
          default: 20

        repeat_transition: 
          name: Transition Time
          description: The duration for the light transition to occur.
          selector:
            number:
              mode: slider
              unit_of_measurement: seconds
              min: 0.25
              max: 5
              step: 0.25
          default: 1

        repeat_delay:
          name: Repeat Delay
          description: Delay between the brightness adjustment steps.
          selector:
            number:
              mode: slider
              unit_of_measurement: seconds
              min: 0.25
              max: 5
              step: 0.25
          default: 1

        repeat_max_count:
          name: Maximum loop repeats
          description: >-
            Maximum number of times to repeat the dimmer brightness event(s).
            <br>&bull; Used as a safety limit to prevent an endless loop, just in case the corresponding stop event is not received.
          default: 10
          selector:
            number:
              min: 1
              max: 100
              mode: slider
              step: 1

    remote_actions:
      name: Left/Right Button Actions
      icon: mdi:code-tags
      collapsed: true
      input:
        button_left_short:
          name: Left Button - Short Press
          description: The action to perform on Short Press of the Left Button.
          default: []
          selector:
            action: null

        button_left_long:
          name: Left Button - Long Press
          description: >
            The action to perform on Long Press of the Left Button.
            <br>Use with care, before the long press event, the "on" event gets triggered.
          default: []
          selector:
            action: null

        button_right_short:
          name: Right Button - Short Press
          description: The action to perform on Short Press of the Right Button.
          default: []
          selector:
            action: null

        button_right_long:
          name: Right Button - Long Press
          description: >
            The action to perform on Long Press of the Right Button.
            <br>Use with care, before the long press event, the "on" event gets triggered.
          default: []
          selector:
            action: null

    automation_config:
      name: Configuration
      icon: mdi:cog
      collapsed: true
      input:
        config_mode:
          name: Automation Mode
          description: Mode that automation runs in.
          default: restart
          selector:
            select:
              options:
                - single
                - restart
                - queued
                - parallel
              custom_value: false
              multiple: false

        config_max_num:
          name: Mode Max
          description: >
            Maximum number of runs that can be executed or queued at a time.
            <br>Ignored by _Single_ and _Restart_ Modes.
          default: 10
          selector:
            number:
              mode: slider
              unit_of_measurement: runs
              min: 1.0
              max: 15.0
              step: 1.0

    debug_config:
      name: Debug
      icon: mdi:bug
      collapsed: true
      input:
        log_valid_events:
          name: Log Valid Remote Events
          description: Display a persistent notification if a _valid event_ is triggered.
          default: false
          selector:
            boolean:

        log_invalid_events:
          name: Log Invalid Remote Events
          description: Display a persistent notification if an _invalid event_ is triggered.
          default: false
          selector:
            boolean:

mode: !input config_mode
max: !input config_max_num
max_exceeded: silent

variables:
  var_remote: !input remote
  var_light: !input light
  var_brightness: !input brightness
  var_brightness_step: !input brightness_step
  var_repeat_delay: !input repeat_delay
  var_repeat_max_count: !input repeat_max_count
  var_repeat_transition: !input repeat_transition

triggers:
  # Dim-Up Button Press – SHORT
  - trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: "on"
    id: press_up_short_zha
  - trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: "on"
    id: press_up_short_mqtt

  # Dim-Up Button Press – LONG
  - trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: "move_with_on_off"
    id: press_up_long_zha
  - trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: "brightness_move_up"
    id: press_up_long_mqtt

  # Dim-Up Button Press – RELEASE
  - trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: "stop_with_on_off"
    id: press_up_release_zha
  - trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: "brightness_stop"
    id: press_up_release_mqtt


  # Dim-Down Button Press – SHORT
  - trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: "off"
    id: press_down_short_zha
  - trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: "off"
    id: press_down_short_mqtt

  # Dim-Down Button Press – LONG
  - trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: "move"
    id: press_down_long_zha
  - trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: "brightness_move_down"
    id: press_down_long_mqtt

  # Dim-Down Button Press – RELEASE
  - trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: "stop_with_on_off"
    id: press_down_release_zha
  - trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: "brightness_stop"
    id: press_down_release_mqtt


  # Left Button Press – SHORT
  - trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: "press"
      args: [257, 13, 0]
    id: press_left_short_zha
  - trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: "arrow_left_click"
    id: press_left_short_mqtt

  # Left Button Press – LONG
  - trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: "hold"
      args: [3329, 0]
    id: press_left_long_zha
  - trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: "arrow_left_hold"
    id: press_left_long_mqtt

  # Left Button Press – RELEASE
  - trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: "release"
    id: press_left_release_zha
  - trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: "arrow_left_release"
    id: press_left_release_mqtt


  # Right Button Press – SHORT
  - trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: "press"
      args: [255, 13, 0]
    id: press_right_short_zha
  - trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: "arrow_right_click"
    id: press_right_short_mqtt

  # Right Button Press – LONG
  - trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: "hold"
      args: [3328, 0]
    id: press_right_long_zha
  - trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: "arrow_right_hold"
    id: press_right_long_mqtt

  # Right Button Press – RELEASE
  - trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: "release"
    id: press_right_release_zha
  - trigger: device
    domain: mqtt
    device_id: !input remote
    type: action
    subtype: "arrow_right_release"
    id: press_right_release_mqtt


conditions:
  - condition: and
    conditions:
      - condition: template
        value_template: "{{ var_remote | length > 0 }}"
      - condition: template
        value_template: "{{ var_light | length > 0 }}"


actions:
  - variables:
      identifiers: "{{ device_attr( var_remote, 'identifiers' ) | list }}"
      integration_type: "{{ identifiers[0][0] | string | lower }}"
      trigger_action: >-
        {%- if integration_type == 'zha' -%}
          {{ trigger.event.data.command }}
        {%- elif integration_type == 'mqtt' -%}
          {{ trigger.payload }}
        {%- endif -%}
      trigger_data: >-
        {%- if integration_type == 'zha' -%}
          {{ trigger.event.data }}
        {%- elif integration_type == 'mqtt' -%}
          {{ trigger }}
        {%- endif -%}

  - if:
      - condition: template
        value_template: !input log_valid_events
    then:
      - action: persistent_notification.create
        data:
          notification_id: blueprint_debug__remote_ikea_styrbar_4_button__command_valid
          title: Remote Command
          message: >-
            IKEA STYRBAR 4 button remote command.
            <br>
            <br>_Integration_:
            <br>{{ integration_type }}
            <br>
            <br>_Device ID_:
            <br>{{ var_remote }}
            <br>
            <br>_Action_:
            <br>{{ trigger_action }}
            <br>
            <br>_Data_:
            <br>{{ trigger_data }}

  - choose:
      # Dim-Up Button Press – SHORT
      - conditions:
          - condition: trigger
            id: 
              - press_up_short_zha
              - press_up_short_mqtt
        sequence:
          - if:
              - condition: template
                value_template: "{{ var_brightness | int > 0 }}"
            then:
              - action: light.turn_on
                target:
                  entity_id: >-
                    {{ expand( var_light ) | selectattr( 'state', 'eq', 'off' ) | map( attribute = 'entity_id' ) | list }}
                data:
                  brightness_pct: !input brightness
                  transition: "{{ var_repeat_transition | float }}"
            else:
              - action: light.turn_on
                target:
                  entity_id: >-
                    {{ expand( var_light ) | selectattr( 'state', 'eq', 'off' ) | map( attribute = 'entity_id' ) | list }}

      # Dim-Up Button Press – LONG
      - conditions:
          - condition: trigger
            id: 
              - press_up_long_zha
              - press_up_long_mqtt
        sequence:
          - repeat:
              until:
                - condition: or
                  conditions:
                    - condition: trigger
                      id: 
                        - press_up_release_zha
                        - press_up_release_mqtt
                    - condition: template
                      value_template: "{{ repeat.index > var_repeat_max_count | int }}"
              sequence:
                - action: light.turn_on
                  target:
                    entity_id: >-
                      {{ expand( var_light ) | selectattr( 'state', 'eq', 'on' ) | map( attribute = 'entity_id' ) | list }}
                  data:
                    brightness_step_pct: "{{ var_brightness_step * 1 | int }}"
                    transition: "{{ var_repeat_transition | float }}"
                - delay:
                    seconds: "{{ var_repeat_delay | float }}"

      # Dim-Down Button Press – SHORT
      - conditions:
          - condition: trigger
            id: 
              - press_down_short_zha
              - press_down_short_mqtt
        sequence:
          - action: light.turn_off
            target:
              entity_id: >-
                {{ expand( var_light ) | selectattr( 'state', 'eq', 'on' ) | map( attribute = 'entity_id' ) | list }}

      # Dim-Down Button Press – LONG
      - conditions:
          - condition: trigger
            id: 
              - press_down_long_zha
              - press_down_long_mqtt
        sequence:
          - repeat:
              until:
                - condition: or
                  conditions:
                    - condition: trigger
                      id: 
                        - press_up_release_zha
                        - press_up_release_mqtt
                    - condition: template
                      value_template: "{{ repeat.index > var_repeat_max_count | int }}"
              sequence:
                - action: light.turn_on
                  target:
                    entity_id: >-
                      {{ expand( var_light ) | selectattr( 'state', 'eq', 'on' ) | map( attribute = 'entity_id' ) | list }}
                  data:
                    brightness_step_pct: "{{ var_brightness_step * -1 | int }}"
                    transition: "{{ var_repeat_transition | float }}"
                - delay:
                    seconds: "{{ var_repeat_delay | float }}"

      # Left Button Press – SHORT
      - conditions:
          - condition: trigger
            id: 
              - press_left_short_zha
              - press_left_short_mqtt
        sequence: !input button_left_short

      # Left Button Press – LONG
      - conditions:
          - condition: trigger
            id: 
              - press_left_long_zha
              - press_left_long_mqtt
        sequence: !input button_left_long

      # Right Button Press – SHORT
      - conditions:
          - condition: trigger
            id: 
              - press_right_short_zha
              - press_right_short_mqtt
        sequence: !input button_right_short

      # Right Button Press – LONG
      - conditions:
          - condition: trigger
            id: 
              - press_right_long_zha
              - press_right_long_mqtt
        sequence: !input button_right_long

    default:
      - condition: template
        value_template: !input log_invalid_events
      - sequence:
          - action: persistent_notification.create
            data:
              notification_id: blueprint_debug__remote_ikea_styrbar_4_button__command_invalid
              title: Uncaught IKEA Remote Command
              message: >-
                IKEA STYRBAR 4 button remote ran the default event from the "choose" event action.
                <br>Please check any automations which may not be handling this event.
                <br>
                <br>_Integration_: {{ integration_type }}
                <br>
                <br>_Device ID_: {{ var_remote }}
                <br>
                <br>_Action_: {{ trigger_action }}
                <br>
                <br>_Data_:
                <br>{{ trigger_data }}
