# This blueprint uses an IKEA STYRBAR Remote Control connected through ZHA
#
# | Button      | Duration    | Action              |
# | ----------- | ----------- | ------------------- |
# | Dim-Up      | Short Press | Turn on             |
# | Dim-Up      | Long Press  | Increase brightness |
# | Dim-Down    | Short Press | Turn off            |
# | Dim-Down    | Long Press  | Decrease brightness |
# | Left Arrow  | Short Press | Custom action       |
# | Left Arrow  | Long Press  | Custom action       |
# | Right Arrow | Short Press | Custom action       |
# | Right Arrow | Long Press  | Custom action       |

blueprint:
  name: IKEA STYRBAR, Remote control
  description: Control devices with your IKEA STYRBAR 4 button remote.
  author: Thomas Maxson
  source_url: https://gist.github.com/thomasmaxson/b494e0d0a67a7ed940188c30eedeb7fa
  homeassistant:
    min_version: 2024.6.0
  domain: automation
  input:
    remote:
      name: IKEA STYRBAR Remote
      description: Select the remote control you wish to use.
      selector:
        device:
          filter:
            - integration: zha
              manufacturer: IKEA of Sweden
              model: Remote Control N2
          multiple: false

    light:
      name: Light(s)
      description: Select the light entities you wish to control.
      selector:
        entity:
          multiple: true
          filter:
            domain: light

    light_config:
      name: Light Configuration
      icon: mdi:lightbulb-on
      collapsed: true
      input:
        force_brightness:
          name: Force turn on brightness
          description: Force the brightness to a specific level, when the "on" button on is pressed.
          default: false
          selector:
            boolean: null

        brightness:
          name: Brightness
          description: Brightness of the light(s) when turning on.
          selector:
            number:
              mode: slider
              unit_of_measurement: "%"
              min: 0.0
              max: 100.0
              step: 1.0
          default: 50

        brightness_step:
          name: Brightness Step
          description: Value to increase/decrease brightness.
          selector:
            number:
              mode: slider
              unit_of_measurement: "%"
              min: 10
              max: 100
              step: 5.0
          default: 20

        repeat_duration:
          name: Repeat Duration
          description: The speed in which to update the light when the button is held.
          selector:
            number:
              mode: slider
              unit_of_measurement: milliseconds
              min: 100
              max: 1000
              step: 100
          default: 500

    remote_actions:
      name: Left/Right Button Actions
      icon: mdi:code-tags
      collapsed: true
      input:
        button_left_short:
          name: Left Button - Short Press
          description: The action to perform on Short Press of the Left Button.
          default: []
          selector:
            action: null

        button_left_long:
          name: Left Button - Long Press
          description: >
            The action to perform on Long Press of the Left Button.
            <br>Use with care, before the long press event, the "on" event gets triggered.
          default: []
          selector:
            action: null

        button_right_short:
          name: Right Button - Short Press
          description: The action to perform on Short Press of the Right Button.
          default: []
          selector:
            action: null

        button_right_long:
          name: Right Button - Long Press
          description: >
            The action to perform on Long Press of the Right Button.
            <br>Use with care, before the long press event, the "on" event gets triggered.
          default: []
          selector:
            action: null

    automation_config:
      name: Automation Configuration
      icon: mdi:cog
      collapsed: true
      input:
        config_mode:
          name: Automation Mode
          description: Mode that the automation runs in.
          default: restart
          selector:
            select:
              options:
                - single
                - restart
                - queued
                - parallel
              custom_value: false
              multiple: false

        config_max_num:
          name: Max Number of Runs
          description: >
            Maximum number of runs that can be executed or queued at a time.
            (ignored by Single and Restart Modes)
          default: 10
          selector:
            number:
              mode: slider
              unit_of_measurement: runs
              min: 1.0
              max: 15.0
              step: 1.0

        log_invalid_events:
          name: Log Invalid Remote Events
          description: Display notification if an invalid trigger is received.
          default: false
          selector:
            boolean:

mode: !input config_mode
max: !input config_max_num
max_exceeded: silent

variables:
  var_light: !input light
  var_repeat: !input repeat_duration
  var_brightness: !input brightness
  var_brightness_step: !input brightness_step
  var_force_brightness: !input force_brightness

triggers:
  - trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote

conditions:
  - condition: template
    value_template: "{{ var_light | length > 0 }}"

action:
  - choose:
      # Short-Press on the dim-up button
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'on' }}"
          - condition: state
            entity_id: !input light
            state: "off"
        sequence:
          sequence:
            - if:
                - condition: template
                  value_template: "{{ var_force_brightness }}"
              then:
                - action: light.turn_on
                  target:
                    entity_id: >-
                      {{ expand( var_light ) | selectattr( 'state', 'eq', 'off' ) | map( attribute = 'entity_id' ) | list }}
                  data:
                    transition: "{{ ( var_repeat / 1000 ) | float }}"
                    brightness_pct: !input brightness
              else:
                - action: light.turn_on
                  target:
                    entity_id: >-
                      {{ expand( var_light ) | selectattr( 'state', 'eq', 'off' ) | map( attribute = 'entity_id' ) | list }}

      # Long-Press on the dim-up button
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'move_with_on_off' }}"
          - condition: state
            entity_id: !input light
            state: "on"
        sequence:
          - repeat:
              while: []
              sequence:
                - action: light.turn_on
                  target:
                    entity_id: >-
                      {{ expand( var_light ) | selectattr( 'state', 'eq', 'on' ) | map( attribute = 'entity_id' ) | list }}
                  data:
                    brightness_step_pct: "{{ var_brightness_step * 1 | int }}"
                    transition: "{{ ( var_repeat / 1000 ) | float }}"
                - delay:
                    milliseconds: !input repeat_duration

      # Short-Press on the dim-down button
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'off' }}"
        sequence:
          - action: light.turn_off
            target:
              entity_id: >-
                {{ expand( var_light ) | selectattr( 'state', 'eq', 'on' ) | map( attribute = 'entity_id' ) | list }}

      # Long-Press on the dim-down button
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'move' }}"
        sequence:
          - repeat:
              while: []
              sequence:
                - action: light.turn_on
                  target:
                    entity_id: >-
                      {{ expand( var_light ) | selectattr( 'state', 'eq', 'on' ) | map( attribute = 'entity_id' ) | list }}
                  data:
                    brightness_step_pct: "{{ var_brightness_step * -1 | int }}"
                    transition: "{{ ( var_repeat / 1000 ) | float }}"
                - delay:
                    milliseconds: !input repeat_duration

      # Short-Press on the left button
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'press' }}"
          - condition: template
            value_template: "{{ trigger.event.data.args == [257,13,0] }}"
        sequence: !input button_left_short

      # Long-Press on the left button.
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'hold' }}"
          - condition: template
            value_template: "{{ trigger.event.data.args == [3329,0] }}"
        sequence: !input button_left_long

      # Short-Press on the right button.
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'press' }}"
          - condition: template
            value_template: "{{ trigger.event.data.args == [256,13,0] }}"
        sequence: !input button_right_short

      # Long-Press on the right button.
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.command == 'hold' }}"
          - condition: template
            value_template: "{{ trigger.event.data.args == [3328,0] }}"
        sequence: !input button_left_long

    # Any other event will cancel the repeat loops.
    # default: []

    default:
      - condition: template
        value_template: "{{ log_invalid_events == 'true' }}"
      - sequence:
          - action: persistent_notification.create
            data:
              notification_id: remote_ikea_styrbar_4_button__blueprint
              title: Uncaught Dimmer Command
              message:
                IKEA Styrbar 4 button remote ran the default event from the "choose" event action.
                Please check any automations which may not be handling this event.
